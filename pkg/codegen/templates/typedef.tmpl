{{range .Types}}
// {{ with .Schema.Description }}{{ . }}{{ else }}{{.TypeName}} defines model for {{.JsonName}}.{{ end }}
type {{.TypeName}} {{if and (opts.AliasTypes) (.CanAlias)}}={{end}} {{.Schema.TypeDecl}}
{{- if gt (len .Schema.EnumValues) 0 }}
// List of {{ .TypeName }}
const (
	{{- $typeName := .TypeName }}
    {{- range $key, $value := .Schema.EnumValues }}
    {{ $typeName }}_{{ $key }} {{ $typeName }} = "{{ $value }}"
    {{- end }}
)
{{- end }}

{{ if not .CanAlias }}
// Validate perform validation on the {{.TypeName}}
func (s {{.TypeName}}) Validate() error {
    {{- $v := .Schema.Validations -}}
    {{ if eq (len .Schema.Properties) 0 }}
    // Run validate on a scalar
    return validation.Validate(
        ({{.Schema.GoType}})(s),
        {{- template "validateRules" .Schema -}}
    )
    {{ else }}
    // Run validate on a struct
    return validation.ValidateStruct(
        &s,
        {{- range .Schema.EmbeddedFields }}validation.Field(&s.{{.}}),{{ end }}
        {{- range .Schema.Properties }}
        validation.Field(
            &s.{{.GoFieldName}},
            {{ if and .Required (not .Nullable) }}validation.Required,{{ end }}
            {{- template "validateRules" .Schema -}}
        ),
        {{- end }}
        {{- if .Schema.HasAdditionalProperties }}
        validation.Field(&s.AdditionalProperties, {{ template "validateRules" .Schema.AdditionalPropertiesType }}),
        {{ end }}
    )
    {{ end }}
}
{{ end }}
{{end}}

{{ define "validateRules" }}
{{- $v := .Validations }}
{{- if or $v.MinItems $v.MaxItems }}
validation.Length({{$v.MinItems}}, {{if $v.MaxItems}}{{ $v.MaxItems }}{{else}}0{{end}}),
{{ end }}
{{- if .ItemType }}
validation.Each(
    {{ template "validateRules" .ItemType }}
),
{{ end }}
{{- if $v.Min }} validation.Min({{ $v.Min }}){{if $v.ExclusiveMin}}.Exclusive(){{end}},{{end}}
{{- if $v.Max }} validation.Max({{ $v.Max }}){{if $v.ExclusiveMax}}.Exclusive(){{end}},{{end}}
{{- if $v.MultipleOf }} validation.MultipleOf({{ $v.MultipleOf }}),{{end}}
{{- if or $v.MinLength $v.MaxLength }}
validation.Length({{$v.MinLength}}, {{if $v.MaxLength}}{{ $v.MaxLength }}{{else}}0{{end}}),
{{- end }}
{{- if ne $v.Pattern "" }}
validation.Match(regexp.MustCompile({{ printf "%#v" $v.Pattern}})),
{{- end }}
{{- if ne (len $v.Values) 0 }}
validation.In(
    {{ range $v.Values }}{{ printf "%#v" . }},{{ end }}
),
{{- end }}
{{ end }}
