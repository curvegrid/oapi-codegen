{{range .Types}}
{{ with .Schema.Description }}{{ . }}{{ else }}// {{.TypeName}} defines model for {{.JsonName}}.{{ end }}
type {{.TypeName}} {{if and (opts.AliasTypes) (.CanAlias)}}={{end}} {{.Schema.TypeDecl}}

{{ if not .CanAlias }}
// Validate perform validation on the {{.TypeName}}
func (s {{.TypeName}}) Validate() error {
    {{- if eq (len .Schema.Properties) 0 }}
    {{- if ne (len .Schema.EnumValues) 0 }}
    // Run validate on an enum
    if err := validation.Validate(
        s,
        validation.In(
            {{ range $key, $value := .Schema.EnumValues }}{{ printf "%v" $key }},{{ end }}
        ),
        validation.Skip, // do not recurse infinitely
    ); err != nil {
        return err
    }
    {{- end }}
    // Run validate on a scalar
    return validation.Validate(
        ({{.Schema.GoType}})(s),
        {{- template "validateRules" .Schema -}}
    )
    {{- else }}
    // Run validate on a struct
    return validation.ValidateStruct(
        &s,
        {{- range .Schema.EmbeddedFields }}validation.Field(&s.{{.}}),{{ end }}
        {{- range .Schema.Properties }}
        validation.Field(
            &s.{{.GoFieldName}},
            {{ if and .Required (not .Nullable) }}validation.Required,{{ end }}
            {{- template "validateRules" .Schema -}}
        ),
        {{- end }}
        {{- if .Schema.HasAdditionalProperties }}
        validation.Field(&s.AdditionalProperties, {{ template "validateRules" .Schema.AdditionalPropertiesType }}),
        {{ end }}
    )
    {{ end }}
}
{{ end }}
{{end}}

{{ define "validateRules" }}
{{- $s := .OAPISchema }}
{{- if $s }}
{{- if or $s.MinItems $s.MaxItems }}
validation.Length({{if $s.MinItems}}{{$s.MinItems}}{{else}}0{{end}}, {{if $s.MaxItems}}{{ $s.MaxItems }}{{else}}0{{end}}),
{{ end }}
{{- if or $s.MinProps $s.MaxProps }}
validation.Length({{$s.MinProps}}, {{if $s.MaxProps}}{{ $s.MaxProps }}{{else}}0{{end}}),
{{ end }}
{{- if .ItemType }}
validation.Each(
    {{ template "validateRules" .ItemType }}
),
{{ end }}
{{- if $s.Min }} validation.Min({{ $s.Min }}){{if $s.ExclusiveMin}}.Exclusive(){{end}},{{end}}
{{- if $s.Max }} validation.Max({{ $s.Max }}){{if $s.ExclusiveMax}}.Exclusive(){{end}},{{end}}
{{- if $s.MultipleOf }} validation.MultipleOf({{ $s.MultipleOf }}),{{end}}
{{- if or $s.MinLength $s.MaxLength }}
validation.Length({{$s.MinLength}}, {{if $s.MaxLength}}{{ $s.MaxLength }}{{else}}0{{end}}),
{{- end }}
{{- if ne $s.Pattern "" }}
validation.Match(regexp.MustCompile({{ printf "%#v" $s.Pattern}})),
{{- end }}
{{- end }}
{{ end }}
