// SecurityScheme represents a security scheme used in the server.
type SecurityScheme string

// ScopesKey returns the key of the scopes in the Context.
func (ss SecurityScheme) ScopesKey() string {
    return string(ss) + ".Scopes"
}

// Scopes collect the scopes defined in the Context.
func (ss SecurityScheme) Scopes(c echo.Context) ([]string, bool) {
    val := c.Get(ss.ScopesKey())
    scopes, ok := val.([]string)
    return scopes, ok
}

// All security schemes defined.
const (
    {{- range . }}
    {{.Name}} SecurityScheme = "{{.Name}}"
    {{- end }}
)

{{ range . }}
{{ if .IsStandardBearer }}
// Parse{{.Name}} returns a bearer token for {{.Name}} from the context.
func Parse{{.Name}}(c echo.Context) (string, bool) {
    const bearerPrefix = "Bearer "
    header := c.Request().Header.Get("Authorization")
    if !strings.HasPrefix(header, bearerPrefix) {
        return "", false
    }
    return header[len(bearerPrefix):], true
}
{{- end }}
{{ if .IsAPIKey }}
// Parse{{.Name}} returns an API key for {{.Name}} from the context.
func Parse{{.Name}}(c echo.Context) (string, bool) {
    {{ if eq .Spec.In "query" }}
    token := c.QueryParam("{{.Spec.Name}}")
    {{- else if eq .Spec.In "header" }}
    token := c.Request().Header.Get("{{.Spec.Name}}")
    {{- else }}
    cookie, err := c.Cookie("{{.Spec.Name}}")
    if err != nil {
        return "", false
    }
    token := cookie.Value
    {{- end }}
    return token, token != ""
}
{{- end }}
{{- end }}
