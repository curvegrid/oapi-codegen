// ServerInterface represents all server handlers.
type ServerInterface interface {
{{range .}}{{.SummaryAsComment }}
// ({{.Method}} {{.Path}})
{{.OperationId}}(ctx *{{.OperationId}}Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}}) error
{{end}}
}

{{ range . }}
{{ $op := . }}
// {{.OperationId}}Context is a context customized for {{.OperationId}} ({{.Method}} {{.Path}}).
type {{.OperationId}}Context struct {
    echo.Context
}
{{- if .HasBody }}

// The body parsers
{{- range .Bodies }}
func (c *{{$op.OperationId}}Context) Parse{{.NameTag}}Body() ({{$op.OperationId}}{{.NameTag}}Body, error) {
    var resp {{$op.OperationId}}{{.NameTag}}Body
    if err := c.Bind(&resp); err != nil {
        return resp, errors.WithStack(err)
    }
    if err := resp.Validate(); err != nil {
        return resp, err
    }
    return resp, nil
}
{{- end }}
{{- end }}

{{- if gt (len .GetResponseTypeDefinitions) 0 }}

// Responses
{{- range .GetResponseTypeDefinitions }}
{{ $respType := .Schema.RefType }}
{{- if or (eq .ResponseName "1XX") (eq .ResponseName "2XX") (eq .ResponseName "3XX") (eq .ResponseName "4XX") (eq .ResponseName "5XX") }}
{{ if eq $respType "" }}
{{ $respType = printf "%sResponse%s" $op.OperationId .ResponseName}}
{{ end }}
// Respond{{.ResponseName}} responses with the given code in range and the JSON response.
func (c *{{$op.OperationId}}Context) Respond{{.ResponseName}}(code int, resp {{$respType}}) error {
    return c.JSON(code, resp)
}
{{- else }}
{{ $respName := statusText .ResponseName | camelCase | title }}
{{ if eq $respType "" }}
{{ $respType = printf "%sResponse%s" $op.OperationId $respName }}
{{ end }}
// {{$respName}} responses with the appropriate code and the JSON response.
func (c *{{$op.OperationId}}Context) {{$respName}}(resp {{$respType}}) error {
    return c.JSON({{.ResponseName}}, resp)
}
{{- end }}
{{ if eq .Schema.RefType "" }}
// {{$respType}} is the response type for {{$op.OperationId}}'s "{{.ResponseName}}" response.
type {{$respType}} = {{.Schema.GoType}}
{{- end }}
{{- end }}
{{- end }}
{{ end }}
